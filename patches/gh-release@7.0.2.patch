diff --git a/bin/lib/get-defaults.js b/bin/lib/get-defaults.js
index 3dd42a86a5e26f59e8230902857d707582c661b3..6496e884d8bbef690971ba3b1974d4e2640958c5 100644
--- a/bin/lib/get-defaults.js
+++ b/bin/lib/get-defaults.js
@@ -28,43 +28,43 @@ function getDefaults (workPath, isEnterprise, callback) {
 
     // check for 'unreleased' section in CHANGELOG: allow sections which do not include a body (eg. 'Added', 'Changed', etc.)
 
-    const unreleased = result.versions.filter(function (release) {
-      return release.title && release.title.toLowerCase
-        ? release.title.toLowerCase().indexOf('unreleased') !== -1
-        : false
-    }).filter(function (release) {
-      return Object.values(release.parsed).flat().length > 0
-    })
+    // const unreleased = result.versions.filter(function (release) {
+    //   return release.title && release.title.toLowerCase
+    //     ? release.title.toLowerCase().indexOf('unreleased') !== -1
+    //     : false
+    // }).filter(function (release) {
+    //   return Object.values(release.parsed).flat().length > 0
+    // })
 
-    if (unreleased.length > 0) {
-      return callback(new Error('Unreleased changes detected in CHANGELOG.md, aborting'))
-    }
+    // if (unreleased.length > 0) {
+    //   return callback(new Error('Unreleased changes detected in CHANGELOG.md, aborting'))
+    // }
 
-    const log = result.versions.filter(function (release) { return release.version !== null })[0]
+    // const log = result.versions.filter(function (release) { return release.version !== null })[0]
 
-    if (!log) {
-      return callback(new Error('CHANGELOG.md does not contain any versions'))
-    }
+    // if (!log) {
+    //   return callback(new Error('CHANGELOG.md does not contain any versions'))
+    // }
 
-    let lerna = {}
-    let errStr
-    if (fs.existsSync(lernaPath)) {
-      lerna = readJson(lernaPath) /* || {} */ // ðŸ‘ˆ though I prefer this expression
-      if (log.version !== lerna.version) {
-        errStr = 'CHANGELOG.md out of sync with lerna.json '
-        errStr += '(' + (log.version || log.title) + ' !== ' + lerna.version + ')'
-        return callback(new Error(errStr))
-      }
-    } else if (log.version !== pkg.version) {
-      errStr = 'CHANGELOG.md out of sync with package.json '
-      errStr += '(' + (log.version || log.title) + ' !== ' + pkg.version + ')'
-      return callback(new Error(errStr))
-    }
+    // let lerna = {}
+    // let errStr
+    // if (fs.existsSync(lernaPath)) {
+    //   lerna = readJson(lernaPath) /* || {} */ // ðŸ‘ˆ though I prefer this expression
+    //   if (log.version !== lerna.version) {
+    //     errStr = 'CHANGELOG.md out of sync with lerna.json '
+    //     errStr += '(' + (log.version || log.title) + ' !== ' + lerna.version + ')'
+    //     return callback(new Error(errStr))
+    //   }
+    // } else if (log.version !== pkg.version) {
+    //   errStr = 'CHANGELOG.md out of sync with package.json '
+    //   errStr += '(' + (log.version || log.title) + ' !== ' + pkg.version + ')'
+    //   return callback(new Error(errStr))
+    // }
 
-    const version = pkg.version ? 'v' + pkg.version : lerna.version ? 'v' + lerna.version : null
+    // const version = pkg.version ? 'v' + pkg.version : lerna.version ? 'v' + lerna.version : null
 
     callback(null, {
-      body: log.body,
+      // body: log.body,
       assets: false,
       owner,
       repo,
@@ -75,8 +75,8 @@ function getDefaults (workPath, isEnterprise, callback) {
       prerelease: false,
       draft: false,
       target_commitish: commit,
-      tag_name: version,
-      name: version
+      // tag_name: version,
+      // name: version
     })
   })
 }
diff --git a/index.js b/index.js
index c91c0d30120d86919c644889dbe159ea9aa11a95..02148358677c78116462153d943849acf082a56c 100644
--- a/index.js
+++ b/index.js
@@ -105,6 +105,7 @@ function _Release (options, emitter, callback) {
       repo: options.repo,
       owner: options.owner
     }).then(results => {
+      console.log("Release API response", results)
       if (options.assets) {
         const assets = options.assets.map(function (asset) {
           if (typeof asset === 'object') {
