const path = require("path");
const fs = require("fs");
const { execSync } = require("child_process");
var ghRelease = require("gh-release");

// This script is used to publish the artifacts generated by the changeset workflow.
// It is triggered by the changeset action and is responsible for creating releases to the repository.
// We do this manually because we want specific/scoped assets to be uploaded to a corresponding SCOPED releases.
// e.g. nsis artifacts should be uploaded to the nsis release, not in a zstd release.
// JSON format: https://github.com/changesets/action?tab=readme-ov-file#outputs
const publishedPackages = process.env.PUBLISHED_PACKAGES;
if (!publishedPackages) {
  console.error("PUBLISHED_PACKAGES environment variable is not set. See script for documentation.");
  process.exit(1);
}

const releases = JSON.parse(publishedPackages);

console.log("Release candidates:", releases);

const packageMap = {
  appimage: ["appimage-13.0.1.7z"],
  nsis: ["nsis-3.0.5.0.7z"],
  "nsis-resources": ["nsis-resources-3.4.1.7z"],
  ran: ["ran-0.1.3.7z"],
  "squirrel.windows": ["squirrel.windows-1.9.0.7z"],
  "win-codesign": ["win-codesign-2.6.0.7z"],
  wine: ["wine-4.0.1-mac.7z"],
  wix: ["wix-4.0.0.5512.2.7z"],
  zstd: ["zstd-v1.5.5-linux-x64.7z", "zstd-v1.5.5-mac.7z", "zstd-v1.5.5-win-ia32.7z", "zstd-v1.5.5-win-x64.7z"],
  fpm: ["fpm-1.9.3-2.3.1-linux-x86_64.7z", "fpm-1.9.3-2.3.1-linux-x86.7z", "fpm-1.9.3-20150715-2.2.2-mac.7z"],
  "linux-tools": ["linux-tools-mac-10.12.4.7z"],
  "snap-template": ["snap-template-electron-4.0-1-amd64.tar.7z", "snap-template-electron-4.0-1-armhf.tar.7z", "snap-template-electron-4.0-2-amd64.tar.7z", "snap-template-electron-4.0.tar.7z"],
};

var releaseOptions = {
  // tag_name: 'v1.0.0',
  //   target_commitish: "master",
  // name: 'v1.0.0',
  // body: '* init\n',
  draft: false,
  prerelease: true,
  // repo: 'electron-builder-binaries',
  // owner: 'electron-userland',,
  // endpoint: 'https://api.github.com' // for GitHub enterprise, use http(s)://hostname/api/v3
};

const isCi = !!process.env.CI;
if (isCi) {
  console.log("CI not detected, blocking remote release. Only logging release config to console...");
}

for (const release of releases) {
  const { name, version } = release;
  const artifactsToUpload = packageMap[name];
  if (!artifactsToUpload) {
    throw new Error(`No artifacts found for ${name}`);
  }
  const releaseName = `${name}@${version}`;
  console.log(`Uploaded artifacts for ${releaseName}...`);

  const artifactPath = (artifact) => path.resolve(__dirname, "../artifacts", artifact);

  const checksums = artifactsToUpload
    .map((artifact) => {
      const checksum = execSync(`shasum -a 512 "${artifactPath(artifact)}" | xxd -r -p | base64`)
        .toString()
        .trim();
      return `${artifact} - ${checksum}`;
    })
    .sort();

  const options = {
    ...releaseOptions,
    name: releaseName,
    tag_name: releaseName,
    body: `*sha512 checksums*\n\n${checksums.join("\n")}`,
    assets: artifactsToUpload.map(artifact => path.join("artifacts", artifact)),
  };

  if (!isCi) {
    console.log("\n\nRelease options:", options);
    continue;
  }
  // If CI, validate token is present
  const token = process.env.GITHUB_TOKEN;
  if (!token) {
    console.error("GITHUB_TOKEN environment variable is not set.");
    process.exit(1);
  }
  ghRelease({ ...options, auth: { token } }, (err) => {
    if (err) {
      console.error(`Error uploading artifacts for ${name}:`, err);
      process.exit(1);
    }
    console.log(`Artifacts for ${name} uploaded successfully.`);
  });
}
